name: Development CI

on:
  push:
    branches: [ develop, feature/* ]
  pull_request:
    branches: [ develop ]

env:
  REGISTRY_LOGIN_SERVER: ${{ secrets.REGISTRY_LOGIN_SERVER }}
  REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  IMAGE_REPOSITORY: python-flask-app

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Snyk security scan
      run: |
        echo "Installing Snyk CLI"
        curl -Lo snyk https://github.com/snyk/cli/releases/latest/download/snyk-linux
        chmod +x snyk
        sudo mv snyk /usr/local/bin/
        
        echo "Running Snyk security scan"
        snyk auth ${{ secrets.SNYK_TOKEN }}
        snyk test --severity-threshold=high || true
    
    - name: Run tests with coverage
      run: |
        python -m pytest test_app.py -v --junitxml=junit/test-results.xml --cov=app --cov-report=xml --cov-report=html
    
    - name: Run linting
      run: |
        python -m pylint app.py --exit-zero --output-format=parseable --reports=no > pylint-report.txt
        cat pylint-report.txt
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.sha }}
        path: |
          junit/test-results.xml
          coverage.xml
          htmlcov/
          pylint-report.txt
    
    - name: Comment PR with test results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          
          // Read pylint results
          let pylintContent = '';
          try {
            pylintContent = fs.readFileSync('pylint-report.txt', 'utf8');
          } catch (e) {
            pylintContent = 'No pylint report found';
          }
          
          const comment = `
          ## üîç Code Quality Report
          
          ### Pylint Results
          \`\`\`
          ${pylintContent}
          \`\`\`
          
          ### Test Results
          Tests completed. Check the Actions tab for detailed results.
          
          ### Security Scan
          Snyk security scan completed. Check logs for vulnerabilities.
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  build-docker-dev:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_LOGIN_SERVER }}
        username: ${{ env.REGISTRY_USERNAME }}
        password: ${{ env.REGISTRY_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=sha,prefix=dev-
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Image security scan
      run: |
        # Install Trivy
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        
        # Scan the built image
        trivy image ${{ steps.meta.outputs.tags }} --exit-code 1 --severity HIGH,CRITICAL
