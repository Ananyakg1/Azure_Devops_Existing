name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY_LOGIN_SERVER: ${{ secrets.REGISTRY_LOGIN_SERVER }}
  REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AKS_CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}
  AKS_RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }}
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  IMAGE_REPOSITORY: python-flask-app
  K8S_NAMESPACE: github-copilot-ns

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Snyk security scan
      run: |
        echo "Installing Snyk CLI"
        curl -Lo snyk https://github.com/snyk/cli/releases/latest/download/snyk-linux
        chmod +x snyk
        sudo mv snyk /usr/local/bin/
        
        echo "Running Snyk security scan"
        snyk auth ${{ secrets.SNYK_TOKEN }}
        snyk test --severity-threshold=high || true
    
    - name: Run tests
      run: |
        python -m pytest test_app.py -v --junitxml=junit/test-results.xml --cov=app --cov-report=xml
    
    - name: Run linting
      run: |
        python -m pylint app.py --exit-zero --output-format=parseable --reports=no > pylint-report.txt
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          junit/test-results.xml
          coverage.xml
          pylint-report.txt

  build-and-push-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_LOGIN_SERVER }}
        username: ${{ env.REGISTRY_USERNAME }}
        password: ${{ env.REGISTRY_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-to-aks:
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group ${{ env.AKS_RESOURCE_GROUP }} --name ${{ env.AKS_CLUSTER_NAME }}
    
    - name: Create namespace and secrets
      run: |
        # Create namespace if it doesn't exist
        kubectl create namespace ${{ env.K8S_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
        
        # Create Docker registry secret
        kubectl create secret docker-registry acr-secret \
          --docker-server=${{ env.REGISTRY_LOGIN_SERVER }} \
          --docker-username=${{ env.REGISTRY_USERNAME }} \
          --docker-password=${{ env.REGISTRY_PASSWORD }} \
          --namespace=${{ env.K8S_NAMESPACE }} \
          --dry-run=client -o yaml | kubectl apply -f -
    
    - name: Deploy to AKS
      run: |
        # Get the image tag from the previous job
        IMAGE_TAG="${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_REPOSITORY }}:main-${{ github.sha }}"
        
        # Update deployment with new image
        sed -i "s|REGISTRY_LOGIN_SERVER/python-flask-app:latest|${IMAGE_TAG}|g" k8s/deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        
        # Wait for deployment to complete
        kubectl rollout status deployment/python-flask-app -n ${{ env.K8S_NAMESPACE }} --timeout=300s
        
        # Get deployment status
        kubectl get pods -n ${{ env.K8S_NAMESPACE }}
        kubectl get services -n ${{ env.K8S_NAMESPACE }}
    
    - name: Run post-deployment tests
      run: |
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod -l app=python-flask-app -n ${{ env.K8S_NAMESPACE }} --timeout=300s
        
        # Test application health
        kubectl port-forward svc/python-flask-app-service 8080:80 -n ${{ env.K8S_NAMESPACE }} &
        sleep 10
        
        # Basic health check
        curl -f http://localhost:8080/ || exit 1
        
        echo "âœ… Deployment successful and application is healthy!"
